/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	v1 "k8s.io/application-aware-controller/pkg/apis/appawarecontroller/v1"
	"k8s.io/client-go/tools/cache"
)

// ResourcesWarmupActuatorLister helps list ResourcesWarmupActuators.
// All objects returned here must be treated as read-only.
type ResourcesWarmupActuatorLister interface {
	// List lists all ResourcesWarmupActuators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourcesWarmupActuator, err error)
	// ResourcesWarmupActuators returns an object that can list and get ResourcesWarmupActuators.
	ResourcesWarmupActuators(namespace string) ResourcesWarmupActuatorNamespaceLister
	ResourcesWarmupActuatorListerExpansion
}

// resourcesWarmupActuatorLister implements the ResourcesWarmupActuatorLister interface.
type resourcesWarmupActuatorLister struct {
	indexer cache.Indexer
}

// NewResourcesWarmupActuatorLister returns a new ResourcesWarmupActuatorLister.
func NewResourcesWarmupActuatorLister(indexer cache.Indexer) ResourcesWarmupActuatorLister {
	return &resourcesWarmupActuatorLister{indexer: indexer}
}

// List lists all ResourcesWarmupActuators in the indexer.
func (s *resourcesWarmupActuatorLister) List(selector labels.Selector) (ret []*v1.ResourcesWarmupActuator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourcesWarmupActuator))
	})
	return ret, err
}

// ResourcesWarmupActuators returns an object that can list and get ResourcesWarmupActuators.
func (s *resourcesWarmupActuatorLister) ResourcesWarmupActuators(namespace string) ResourcesWarmupActuatorNamespaceLister {
	return resourcesWarmupActuatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourcesWarmupActuatorNamespaceLister helps list and get ResourcesWarmupActuators.
// All objects returned here must be treated as read-only.
type ResourcesWarmupActuatorNamespaceLister interface {
	// List lists all ResourcesWarmupActuators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourcesWarmupActuator, err error)
	// Get retrieves the ResourcesWarmupActuator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ResourcesWarmupActuator, error)
	ResourcesWarmupActuatorNamespaceListerExpansion
}

// resourcesWarmupActuatorNamespaceLister implements the ResourcesWarmupActuatorNamespaceLister
// interface.
type resourcesWarmupActuatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourcesWarmupActuators in the indexer for a given namespace.
func (s resourcesWarmupActuatorNamespaceLister) List(selector labels.Selector) (ret []*v1.ResourcesWarmupActuator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourcesWarmupActuator))
	})
	return ret, err
}

// Get retrieves the ResourcesWarmupActuator from the indexer for a given namespace and name.
func (s resourcesWarmupActuatorNamespaceLister) Get(name string) (*v1.ResourcesWarmupActuator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("resourceswarmupactuator"), name)
	}
	return obj.(*v1.ResourcesWarmupActuator), nil
}
